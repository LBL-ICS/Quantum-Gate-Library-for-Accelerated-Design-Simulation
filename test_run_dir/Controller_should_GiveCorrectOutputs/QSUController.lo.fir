FIRRTL version 1.2.0
circuit QSUController :
  module QSUController : @[\\src\\main\\scala\\QuantumStateUnit\\QSU_Architecture\\Controller_Designs\\GateInputController.scala 8:7]
    input clock : Clock @[\\src\\main\\scala\\QuantumStateUnit\\QSU_Architecture\\Controller_Designs\\GateInputController.scala 8:7]
    input reset : UInt<1> @[\\src\\main\\scala\\QuantumStateUnit\\QSU_Architecture\\Controller_Designs\\GateInputController.scala 8:7]
    input io_in_replaceQSV : UInt<1> @[\\src\\main\\scala\\QuantumStateUnit\\QSU_Architecture\\Controller_Designs\\GateInputController.scala 9:14]
    input io_in_applygate : UInt<1> @[\\src\\main\\scala\\QuantumStateUnit\\QSU_Architecture\\Controller_Designs\\GateInputController.scala 9:14]
    input io_in_valid : UInt<1> @[\\src\\main\\scala\\QuantumStateUnit\\QSU_Architecture\\Controller_Designs\\GateInputController.scala 9:14]
    output io_out_update_QSR : UInt<1> @[\\src\\main\\scala\\QuantumStateUnit\\QSU_Architecture\\Controller_Designs\\GateInputController.scala 9:14]
    output io_out_replaceQSV : UInt<1> @[\\src\\main\\scala\\QuantumStateUnit\\QSU_Architecture\\Controller_Designs\\GateInputController.scala 9:14]
    output io_out_en_QGP : UInt<1> @[\\src\\main\\scala\\QuantumStateUnit\\QSU_Architecture\\Controller_Designs\\GateInputController.scala 9:14]
    output io_out_readyFlag : UInt<1> @[\\src\\main\\scala\\QuantumStateUnit\\QSU_Architecture\\Controller_Designs\\GateInputController.scala 9:14]

    reg en_QGP : UInt<1>, clock with :
      reset => (UInt<1>("h0"), en_QGP) @[\\src\\main\\scala\\QuantumStateUnit\\QSU_Architecture\\Controller_Designs\\GateInputController.scala 30:30]
    node _en_QGP_T = eq(en_QGP, UInt<1>("h0")) @[\\src\\main\\scala\\QuantumStateUnit\\QSU_Architecture\\Controller_Designs\\GateInputController.scala 31:58]
    node _en_QGP_T_1 = and(io_in_applygate, _en_QGP_T) @[\\src\\main\\scala\\QuantumStateUnit\\QSU_Architecture\\Controller_Designs\\GateInputController.scala 31:56]
    node _en_QGP_T_2 = eq(io_in_valid, UInt<1>("h0")) @[\\src\\main\\scala\\QuantumStateUnit\\QSU_Architecture\\Controller_Designs\\GateInputController.scala 31:68]
    node _en_QGP_T_3 = and(_en_QGP_T_1, _en_QGP_T_2) @[\\src\\main\\scala\\QuantumStateUnit\\QSU_Architecture\\Controller_Designs\\GateInputController.scala 31:66]
    node _en_QGP_T_4 = mux(en_QGP, UInt<1>("h1"), _en_QGP_T_3) @[\\src\\main\\scala\\QuantumStateUnit\\QSU_Architecture\\Controller_Designs\\GateInputController.scala 31:26]
    node _io_out_readyFlag_T = not(en_QGP) @[\\src\\main\\scala\\QuantumStateUnit\\QSU_Architecture\\Controller_Designs\\GateInputController.scala 33:23]
    reg prev : UInt<1>, clock with :
      reset => (UInt<1>("h0"), prev) @[\\src\\main\\scala\\QuantumStateUnit\\QSU_Architecture\\Controller_Designs\\GateInputController.scala 43:28]
    reg delayUpdate : UInt<1>, clock with :
      reset => (UInt<1>("h0"), delayUpdate) @[\\src\\main\\scala\\QuantumStateUnit\\QSU_Architecture\\Controller_Designs\\GateInputController.scala 48:34]
    node _update_T = and(en_QGP, io_in_valid) @[\\src\\main\\scala\\QuantumStateUnit\\QSU_Architecture\\Controller_Designs\\GateInputController.scala 49:29]
    node _update_T_1 = eq(prev, UInt<1>("h0")) @[\\src\\main\\scala\\QuantumStateUnit\\QSU_Architecture\\Controller_Designs\\GateInputController.scala 49:45]
    node _update_T_2 = and(_update_T, _update_T_1) @[\\src\\main\\scala\\QuantumStateUnit\\QSU_Architecture\\Controller_Designs\\GateInputController.scala 49:43]
    node update = _update_T_2 @[\\src\\main\\scala\\QuantumStateUnit\\QSU_Architecture\\Controller_Designs\\GateInputController.scala 47:25 49:18]
    node _GEN_0 = mux(UInt<1>("h1"), update, delayUpdate) @[\\src\\main\\scala\\QuantumStateUnit\\QSU_Architecture\\Controller_Designs\\GateInputController.scala 48:{34,34,34}]
    node _io_out_update_QSR_T = eq(en_QGP, UInt<1>("h0")) @[\\src\\main\\scala\\QuantumStateUnit\\QSU_Architecture\\Controller_Designs\\GateInputController.scala 50:41]
    node _io_out_update_QSR_T_1 = and(_io_out_update_QSR_T, io_in_replaceQSV) @[\\src\\main\\scala\\QuantumStateUnit\\QSU_Architecture\\Controller_Designs\\GateInputController.scala 50:49]
    node _io_out_update_QSR_T_2 = or(delayUpdate, _io_out_update_QSR_T_1) @[\\src\\main\\scala\\QuantumStateUnit\\QSU_Architecture\\Controller_Designs\\GateInputController.scala 50:37]
    node _io_out_replaceQSV_T = eq(en_QGP, UInt<1>("h0")) @[\\src\\main\\scala\\QuantumStateUnit\\QSU_Architecture\\Controller_Designs\\GateInputController.scala 51:25]
    node _io_out_replaceQSV_T_1 = and(_io_out_replaceQSV_T, io_in_replaceQSV) @[\\src\\main\\scala\\QuantumStateUnit\\QSU_Architecture\\Controller_Designs\\GateInputController.scala 51:33]
    node _en_QGP_T_5 = not(en_QGP) @[\\src\\main\\scala\\QuantumStateUnit\\QSU_Architecture\\Controller_Designs\\GateInputController.scala 53:17]
    node _GEN_1 = mux(delayUpdate, _en_QGP_T_5, _en_QGP_T_4) @[\\src\\main\\scala\\QuantumStateUnit\\QSU_Architecture\\Controller_Designs\\GateInputController.scala 52:20 53:14 31:20]
    io_out_update_QSR <= _io_out_update_QSR_T_2 @[\\src\\main\\scala\\QuantumStateUnit\\QSU_Architecture\\Controller_Designs\\GateInputController.scala 50:21]
    io_out_replaceQSV <= _io_out_replaceQSV_T_1 @[\\src\\main\\scala\\QuantumStateUnit\\QSU_Architecture\\Controller_Designs\\GateInputController.scala 51:21]
    io_out_en_QGP <= en_QGP @[\\src\\main\\scala\\QuantumStateUnit\\QSU_Architecture\\Controller_Designs\\GateInputController.scala 32:20]
    io_out_readyFlag <= _io_out_readyFlag_T @[\\src\\main\\scala\\QuantumStateUnit\\QSU_Architecture\\Controller_Designs\\GateInputController.scala 33:20]
    en_QGP <= mux(reset, UInt<1>("h0"), _GEN_1) @[\\src\\main\\scala\\QuantumStateUnit\\QSU_Architecture\\Controller_Designs\\GateInputController.scala 30:{30,30}]
    prev <= mux(reset, UInt<1>("h0"), io_in_valid) @[\\src\\main\\scala\\QuantumStateUnit\\QSU_Architecture\\Controller_Designs\\GateInputController.scala 43:{28,28} 44:18]
    delayUpdate <= _GEN_0
